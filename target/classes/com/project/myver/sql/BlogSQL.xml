<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"HTTP://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="blog">

	<!-- 'blog'table ========================================================== -->
	<!-- 21.05.03 블로그 생성 -->
	<insert id="insertBlog" parameterType="blogDTO" useGeneratedKeys="true" keyProperty="blog_no">
		INSERT INTO blog (member_no, blog_id, blog_title, blog_nick)
		VALUES (#{member_no}, #{blog_id}, #{blog_title}, #{blog_nick})
	</insert>
	
	<!-- 21.06.22 블로그 정보 수정 -->
	<update id="blogUpdate">
		update blog 
		SET blog_title = #{blog_title},
			blog_nick = #{blog_nick},
			blog_info = #{blog_info},
			blog_topic = #{blog_topic}
		where blog_id = #{blog_id}
	</update>
	
	<!-- 21.05.19 블로그 홈에서 보일 'member_no'에 해당하는 블로그 정보 -->
	<select id="selectBlogHomeDataFromBlog" parameterType="Integer" resultType="blogDTO">
		SELECT blog_no, blog_nick, blog_img_no
		FROM blog
		WHERE member_no = #{member_no}
	</select>
	
	<!-- 21.05.19 'member_id'로 블로그 정보 가져오기 -->
	<select id="selectAllFromBlog" parameterType="String" resultType="blogDTO">
		SELECT * 
		FROM blog 
		WHERE blog_id = #{blog_id}
	</select>
	
	<!-- 21.05.25 'member_no'로 블로그 이웃 정보 가져오기 (blog_title, blog_id, blog_nick, blog_img_no) -->
	<select id="selectBlog_titleAndidAndNickAndImg_noFromBlog" parameterType="Integer" resultType="blogDTO">
		SELECT blog_title, blog_id, blog_nick, blog_img_no 
		FROM blog 
		WHERE member_no = #{member_no}
	</select>
	
	<!-- 21.08.06 blog_id로 닉네임 가져오기 -->
	<select id="selectBlog_nickByBlog_idFromBlog" parameterType="String" resultType="blogDTO">
		SELECT blog_nick 
		FROM blog 
		WHERE blog_id = #{value} <!-- value : blog_id -->
	</select>
	
	
	
	<!-- 'blog_visit'table ==================================================================== -->
	<!-- 21.05.19 'blog_no'에 해당하는 블로그 오늘 방문자수 -->
	<select id="todayBlogVisitCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*)
		FROM blog_visit
		WHERE date > CURDATE()
			AND blog_no = #{blog_no}
	</select>
	
	<!-- 21.07.03 'blog_no'에 해당하는 블로그글 오늘 조회수 -->
	<select id="todayObjectHitFromBlog_visit" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) 
		FROM blog_visit 
		WHERE date > CURDATE() 
			AND blog_no = 0 
			AND blog_object_no != -1
	</select>
	
	<!-- 21.06.09 블로그 방문자 정보 추가 -->
	<insert id="insertBlog_visit" parameterType="blogDTO">
		INSERT INTO blog_visit (blog_no, blog_object_no, visitor_no, date
		<if test="query != null">
			, query
		</if>
		)
		VALUES (#{blog_no}, #{blog_object_no}, #{visitor_no}, SYSDATE()
		<if test="query != null">
			, #{query}
		</if>
		)
	</insert>
	
	<!-- 21.07.04 'blog_no'로 특정날짜(endDay)까지의 15일의 총 조회수 가져오기 -->
	<select id="totalHitOfLast15DaysFromBlog_visit" parameterType="Map" resultType="blogDTO">
	<![CDATA[
		SELECT DATE_FORMAT(DATE, '%Y.%m.%d') as str_date, COUNT(*) as hits
		FROM blog_visit
		WHERE date > #{startDate} AND date < #{endDate}
			AND blog_no = #{blog_no}
			AND blog_object_no != -1
		GROUP BY str_date
	]]>
	</select>
	
	
	
	<!-- 'blog_category'table ================================================================ -->
	<!-- 21.05.28 블로그 기본 카테고리('전체보기') 생성 -->
	<insert id="insertDefaultBlogCategory" parameterType="Integer">
		INSERT INTO blog_category (blog_no, category_index, category_name, is_basic, all_category)
		VALUES (#{blog_no}, 0, '전체보기', 1, 1)
	</insert>
	
	<!-- 21.05.23 카테고리 리스트 가져오기 -->
	<select id="selectAllFromBlog_category" parameterType="Integer" resultType="blogDTO">
		SELECT * 
		FROM blog_category 
		WHERE blog_no = #{blog_no} 
		ORDER BY category_index
	</select>
	
	<!-- 21.06.02 공개된 카테고리 리스트 가져오기 -->
	<select id="selectPublicFromBlog_category" parameterType="Integer" resultType="blogDTO">
		SELECT * 
		FROM blog_category 
		WHERE blog_no = #{blog_no}
			AND is_public = 0
		ORDER BY category_index
	</select>
	
	<!-- 21.06.12 'blog_category_no'에 해당하는 정보 가져오기 -->
	<select id="selectByBlog_category_noFromBlog_category" parameterType="Map" resultType="blogDTO">
		SELECT * 
		FROM blog_category 
		WHERE blog_category_no = #${blog_category_no}
		<if test="!visitor_type.equals('owner')">
			AND is_public = 0
		</if>
	</select>
	
	<!-- 21.06.14 'blog_category_no'에 해당하는 'category_name' 가져오기 -->
	<select id="selectCategory_nameByBlog_category_noFromBlog_category" parameterType="Integer" resultType="String">
		SELECT category_name
		FROM blog_category
		WHERE blog_category_no = #{blog_category_no}
	</select>
	
	<!-- 21.06.29 'blog_no' 해당하는 카테고리의 'blog_category_no','category_name' 가져오기 -->
	<select id="selectBlog_category_noAndCategory_name" parameterType="Integer" resultType="BlogDTO">
		SELECT blog_category_no, category_name
		FROM blog_category 
		WHERE blog_no = #{blog_no}
		ORDER BY category_index
	</select>
	
	<!-- 21.06.29 'blog_no'에 해당하는 카테고리의 'blog_category_no','category_name','is_public','parent_category_no','is_upper' 가져오기 -->
	<select id="selectBlog_category_noAndCategory_nameAndIs_publicAndParent_category_noAndIs_upper" parameterType="Integer" resultType="BlogDTO">
		SELECT blog_category_no, category_name, is_public, parent_category_no, is_upper
		FROM blog_category 
		WHERE blog_no = #{blog_no}
		ORDER BY category_index
	</select>
	
	
	
	<!-- 'blog_neighbor'table ================================================================== -->
	<!-- 21.08.06 이웃 추가 -->
	<insert id="insertBlog_neighbor" parameterType="Map">
		INSERT INTO blog_neighbor (member_no, neighbor_member_no, date)
		VALUES (#{member_no}, #{neighbor_member_no}, SYSDATE())
	</insert>
	
	<!-- 21.08.06 이웃 삭제 -->
	<delete id="deleteBlog_neighbor" parameterType="Map">
		DELETE FROM blog_neighbor
		WHERE member_no = #{member_no} 
			AND neighbor_member_no = #{neighbor_member_no}
	</delete>
	
	<!-- 21.05.24 내가 추가한 이웃 리스트 가져오기 -->
	<select id="selectFollowingListFromBlog_neighbor" parameterType="Integer" resultType="blogDTO">
		SELECT neighbor_member_no, date
		FROM blog_neighbor 
		WHERE member_no = #{member_no}
	</select>
	
	<!-- 21.05.24 나를 추가한 이웃 리스트 가져오기 -->
	<select id="selectFollowerListFromBlog_neighbor" parameterType="Integer" resultType="blogDTO">
		SELECT member_no, date
		FROM blog_neighbor
		WHERE neighbor_member_no = #{member_no}
	</select>
	
	<!-- 21.08.06 member_no와 neighbor_member_no에 해당하는 레코드 개수 세기 -->
	<select id="selectCntByMember_noAndNeighborMember_noFromBlog_neighbor" parameterType="Map" resultType="Integer">
		SELECT COUNT(*) 
		FROM blog_neighbor 
		WHERE member_no = ${member_no} 
			AND neighbor_member_no = ${neighbor_member_no}
	</select>
	
	
	
	<!-- 'blog_object'table =================================================================== -->
	<!-- 21.07.30 블로그 글 작성 -->
	<insert id="insertBlog_object" parameterType="blogDTO" useGeneratedKeys="true" keyProperty="blog_object_no">
		INSERT INTO blog_object
			(blog_category_no, blog_no, title, content, open_type, date)
		VALUES(#{blog_category_no}, #{blog_no}, #{title}, #{content}, #{open_type},
			<choose>
				<when test="date == null">
					SYSDATE()
				</when>
				<otherwise>
					${date}
				</otherwise>
			</choose>
		)
		
	</insert>
	
	<!-- 21.06.09 게시물 조회수 업데이트(증가) -->
	<update id="updateBlogObjectHits" parameterType="Integer">
		UPDATE blog_object
		SET
		hits = hits+1
		where blog_object_no = #{blog_object_no}
	</update>

	<!-- 21.06.10 'blog_no'와 'blog_object_no'에 일치하는 'blog_object' 가져오기 -->
	<select id="selectBlog_object" parameterType="Map" resultType="blogDTO">
		SELECT * 
		FROM blog_object 
		WHERE blog_no = #{blog_no}
			AND blog_object_no = #{blog_object_no}
			<choose>
				<when test="visitor_type.equals('neighbor')">
					AND open_type != 2
				</when>
				<when test="visitor_type.equals('other')">
					AND open_type = 0
				</when>
			</choose>
	</select>
	
	
	
	<!-- 'blog_comment' table =========================================== -->
	<!-- 21.07.03 'blog_no'에 해당하는 오늘의 댓글수 가져오기 -->
	<select id="todayCommentCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) 
		FROM blog_comment 
		WHERE DATE > CURDATE() 
			AND blog_no = #{blog_no}
	</select>
	
	
	
	<!-- 'blog_comment' & 'blog_object' table ================================================== -->
	<!-- 'blog_no'에 해당하는 블로그 댓글과 해당하는 댓글의 글 번호의 글제목 가져오기 -->
	<select id="selectCommentByBlog_noFromBlog_comment" parameterType="Integer" resultType="commentDTO">
		SELECT C.blog_comment_no, C.blog_object_no, C.blog_no, C.id, C.nick, C.comment, C.date, O.title 
		FROM blog_comment C, blog_object O 
		WHERE C.blog_no = #{blog_no}
			AND C.blog_object_no = O.blog_object_no
	</select>
	
	
	
	<!-- 'blog_visit' & 'blog_object' table ==================================================== -->
	<select id="hitRankDuringFromBlog_visitAndBlog_object" parameterType="Map" resultType="blogDTO">
	<![CDATA[
		SELECT BV.blog_object_no, BO.title, BO.date, COUNT(*) AS hits
  		FROM blog_visit BV, blog_object BO 
		  WHERE BV.blog_no = #{blog_no}
		  	AND BV.blog_object_no != -1 
			AND BV.DATE > #{startDate} AND BV.DATE < #{endDate}
			AND BV.blog_object_no = BO.blog_object_no
		  GROUP BY BV.blog_object_no
		  ORDER BY hits DESC
	]]>
	</select>
	
	
	
	<!-- 'blog_object'table & 'blog_cateogy'table =========================================================== -->
	<!-- 21.05.27 'blog_category_no' 혹은 'blog_no'에 해당하는 개수 가져오기 -->
	<select id="selectTotalCountByNoFromBlog_object" parameterType="Map" resultType="Integer">
		SELECT COUNT(*) 
		FROM blog_object AS O, blog_category AS C
		WHERE 
			<choose>
				<when test="column_name.equalsIgnoreCase('blog_no')">
					O.blog_no = #{no}
				</when>
				<otherwise>
					O.blog_category_no = #{no}
				</otherwise>
			</choose>
			<choose>
				<when test="visitor_type.equals('neighbor')">
					AND C.is_public = 0
					AND O.open_type != 2
				</when>
				<when test="visitor_type.equals('other')">
					AND C.is_public = 0
					AND O.open_type = 0
				</when>
			</choose>
			AND O.blog_category_no = C.blog_category_no
	</select>
	
	<!-- 21.07.30 'blog_category_no' 혹은 'blog_no'에 해당하는 것들 중에 특정 글의 순번 가져오기 -->
	<select id="selectRowNumByNoFromBlog_object" parameterType="Map" resultType="Integer">
		SELECT COUNT(*)+1 
		FROM blog_object AS O, blog_category AS C
		WHERE 
			<choose>
				<when test="column_name.equalsIgnoreCase('blog_no')">
					O.blog_no = #{no}
				</when>
				<otherwise>
					O.blog_category_no = #{no}
				</otherwise>
			</choose>
			<choose>
				<when test="visitor_type.equals('neighbor')">
					AND C.is_public = 0
					AND O.open_type != 2
				</when>
				<when test="visitor_type.equals('other')">
					AND C.is_public = 0
					AND O.open_type = 0
				</when>
			</choose>
			AND O.blog_category_no = C.blog_category_no
		<![CDATA[
			AND O.blog_object_no <= #{blog_object_no}
		]]>
	</select>
	
	<!-- 21.05.27 목록 가져오기 -->
	<select id="selectListDetailByNoFromBlog_object" parameterType="pageUtil" resultType="blogDTO">
		SELECT @ROWNUM := @ROWNUM + 1 AS ROWNUM, TB.*
  		FROM (SELECT blog_object_no, title, DATE, O.open_type, hits
			FROM blog_object AS O, blog_category AS C
			WHERE 
				<choose>
					<when test="column_name != null and column_name.equalsIgnoreCase('blog_no')">
						O.blog_no = #{no}
					</when>
					<otherwise>
						O.blog_category_no = #{no}
					</otherwise>
				</choose>
			  	<choose>
					<when test="visitor_type.equals('neighbor')">
						AND C.is_public = 0
						AND O.open_type != 2
					</when>
					<when test="visitor_type.equals('other')">
						AND C.is_public = 0
						AND O.open_type = 0
					</when>
				</choose>
				AND O.blog_category_no = C.blog_category_no
			ORDER BY blog_object_no DESC) AS TB
      		, (SELECT @ROWNUM := 0) AS RN
 		LIMIT #{startNo}, #{endNo}
	</select>
	
	<!-- 21.05.27 게시글 내용 가져오기 -->
	<select id="selectObjectDetailByNoFromBlog_object" parameterType="pageUtil" resultType="blogDTO">
		SELECT @ROWNUM := @ROWNUM + 1 AS ROWNUM, TB.*
  		FROM (SELECT blog_object_no, O.blog_category_no, category_name, title, content, date, O.open_type, hits, likes
			FROM blog_object AS O, blog_category AS C
			WHERE
				<choose>
					<when test="column_name!=null and column_name.equalsIgnoreCase('blog_no')">
						O.blog_no = #{no}
					</when>
					<otherwise>
						O.blog_category_no = #{no}
					</otherwise>
			  	</choose>
				<choose>
					<when test="visitor_type.equals('neighbor')">
						AND C.is_public = 0
						AND O.open_type != 2
					</when>
					<when test="visitor_type.equals('other')">
						AND C.is_public = 0
						AND O.open_type = 0
					</when>
				</choose>
			  	AND O.blog_category_no = C.blog_category_no
            ORDER BY blog_object_no DESC) AS TB
      		, (SELECT @ROWNUM := 0) AS RN
 		LIMIT #{startNo}, #{endNo}
	</select>
	
</mapper>
	
